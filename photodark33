
<html lang="ar" dir="rtl">

<head>


<meta charset="UTF-8">


<meta name="viewport" content="width=device-width, initial-scale=1.0">


<meta name="theme-color" content="#4285F4">


<title>
HalaGPT
</title>


<link href="https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" defer="">

</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/perlin-noise/1.0.0/perlin.js" defer="">

</script>


<style>


:root {
--primary-glow: #8a2be2;
--secondary-glow: #00FFFF;
--tertiary-glow: #FFD700;
        --glass-background: rgba(255, 255, 255, 0.05);
        --glass-border: rgba(255, 255, 255, 0.1);
        --glass-shadow-dark: rgba(0, 0, 0, 0.4);
        --glass-shadow-light: rgba(255, 255, 255, 0.05);

        --shadow-level-1: 0 5px 15px var(--glass-shadow-dark), 0 2px 5px var(--glass-shadow-light);
        --shadow-level-2: 0 10px 30px var(--glass-shadow-dark), 0 5px 10px var(--glass-shadow-light);
        --shadow-level-3: 0 20px 60px var(--glass-shadow-dark), 0 10px 20px var(--glass-shadow-light);

        --border-radius-sm: 8px; 
        --border-radius-md: 16px;
        --border-radius-lg: 32px;

        --transition-speed-fast: 0.2s ease-in-out; 
        --transition-speed-normal: 0.4s ease-in-out;
        --transition-speed-slow: 0.7s ease-in-out;

        --text-color-light: #E0E0E0;
        --text-color-dark: #A0A0A0;
        --text-color-darker: #707070;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        -webkit-tap-highlight-color: transparent;
    }

    html {
        scroll-behavior: smooth;
    }

    body {
        font-family: 'Cairo', sans-serif;
        overflow-x: hidden; 
        background-color: #050515;
        color: var(--text-color-light);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        line-height: 1.6; 
        transition: background-color var(--transition-speed-normal), color var(--transition-speed-normal);
    }

    .app-container {
        max-width: 100%
        width: 100%
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        position: relative;
        z-index: 1;
        padding: 15px; 
        padding-top: 10px;
        padding-bottom: 60px; 
    }

    @media (min-width: 600px) {
        .app-container {
            max-width: 600px; 
            background: rgba(0, 0, 0, 0.2);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-level-3);
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.05);
            padding: 25px; 
            padding-top: 20px;
            padding-bottom: 80px; 
            margin-top: 15px;
            margin-bottom: 15px;
        }
        body {
            align-items: center; 
            justify-content: flex-start; 
            min-height: 100vh; 
        }
    }

    .main-content {
        padding: 15px; 
        flex-grow: 1;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: thin;
        scrollbar-color: var(--primary-glow) transparent;
    }
    .main-content::-webkit-scrollbar {
        width: 6px; 
    }
    .main-content::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
    }
    .main-content::-webkit-scrollbar-thumb {
        background-color: var(--primary-glow);
        border-radius: 8px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    #threejs-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%
        height: 100%
        z-index: -1;
        opacity: 0.95;
        filter: brightness(0.9) contrast(1.1);
    }

    .card {
        background: var(--glass-background);
        backdrop-filter: blur(15px) saturate(150%); 
        -webkit-backdrop-filter: blur(15px) saturate(150%);
        border-radius: var(--border-radius-md);
        padding: 20px; 
        box-shadow: var(--shadow-level-2);
        margin-bottom: 15px; 
        transition: transform var(--transition-speed-normal), box-shadow var(--transition-speed-normal);
        position: relative;
        overflow: hidden;
        border: 1px solid var(--glass-border);
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%
        height: 4px; 
        background: linear-gradient(to right, var(--primary-glow), var(--secondary-glow));
        border-top-left-radius: var(--border-radius-md);
        border-top-right-radius: var(--border-radius-md);
    }

    .card-title {
        font-size: 1.4rem; 
        margin-bottom: 15px; 
        color: var(--text-color-light);
        display: flex;
        align-items: center;
        gap: 10px; 
        font-weight: 800;
        position: relative;
        padding-bottom: 8px; 
        text-shadow: 0 0 6px rgba(0,0,0,0.5);
    }

    .card-title::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        width: 50px; 
        height: 3px;
        background: var(--primary-glow);
        border-radius: 2px;
    }

    .card-title i {
        font-size: 1.3rem; 
        color: var(--primary-glow);
        text-shadow: 0 0 5px var(--primary-glow);
    }

    .input-group {
        margin-bottom: 20px; 
    }

    .input-label {
        display: block;
        margin-bottom: 8px; 
        font-weight: 700;
        color: var(--text-color-light);
        font-size: 0.9rem; 
        text-shadow: 0 0 4px rgba(0,0,0,0.5);
    }

    .input-field {
        width: 100%
        padding: 12px; 
        border: 1px solid var(--glass-border);
        border-radius: var(--border-radius-sm);
        font-family: inherit;
        font-size: 0.9rem; 
        resize: vertical;
        transition: border-color var(--transition-speed-fast), box-shadow var(--transition-speed-fast), background-color var(--transition-speed-fast);
        background-color: rgba(255, 255, 255, 0.08);
        color: var(--text-color-light);
        box-shadow: inset 0 2px 6px rgba(0,0,0,0.2);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        outline: none;
    }

    .input-field:focus {
        border-color: var(--primary-glow);
        box-shadow: 0 0 0 3px rgba(138, 43, 226, 0.3), inset 0 2px 6px rgba(0,0,0,0.3);
        background-color: rgba(255, 255, 255, 0.15);
    }

    textarea.input-field {
        min-height: 120px; 
    }

    .style-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(90px, 1fr)); 
        gap: 10px; 
        margin-bottom: 20px; 
    }

    .style-option {
        padding: 12px 8px; 
        text-align: center;
        border-radius: var(--border-radius-sm);
        background: var(--glass-background);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        cursor: pointer;
        transition: all var(--transition-speed-fast);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 6px; 
        font-size: 0.85rem; 
        color: var(--text-color-light);
        user-select: none;
        box-shadow: var(--shadow-level-1);
        position: relative;
        overflow: hidden;
        font-weight: 600;
    }

    .style-option::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%
        height: 100%
        background: linear-gradient(135deg, rgba(255,255,255,0.08) 0%, transparent 50%, rgba(255,255,255,0.08) 100%);
        transform: translateX(-100%);
        transition: transform 0.4s ease-out;
        z-index: -1;
    }

    .style-option:hover::before {
        transform: translateX(100%);
    }

    .style-option i {
        font-size: 1.3rem; 
        color: var(--text-color-dark);
        transition: color var(--transition-speed-fast);
        text-shadow: 0 0 4px rgba(0,0,0,0.5);
    }

    .style-option.active {
        background: rgba(138, 43, 226, 0.2);
        border-color: var(--primary-glow);
        color: var(--primary-glow);
        font-weight: 800;
        box-shadow: var(--shadow-level-2), 0 0 15px rgba(138, 43, 226, 0.4);
        transform: translateY(-3px) scale(1.01);
    }

    .style-option.active i {
        color: var(--primary-glow);
        text-shadow: 0 0 8px var(--primary-glow);
    }

    .style-option:hover:not(.active) {
        border-color: var(--secondary-glow);
        color: var(--secondary-glow);
        background-color: rgba(0, 255, 255, 0.1);
        box-shadow: var(--shadow-level-2);
        transform: translateY(-2px);
        text-shadow: 0 0 5px var(--secondary-glow);
    }

    .style-description {
        font-size: 0.75rem; 
        color: var(--text-color-dark);
        margin-top: 2px;
        opacity: 0.8;
    }

    .style-option.active .style-description {
        color: var(--primary-glow);
        opacity: 1;
    }

    
    .btn {
        width: 100%
        padding: 14px; 
        border: none;
        border-radius: var(--border-radius-sm);
        background: linear-gradient(to right, var(--primary-glow), var(--secondary-glow));
        color: white;
        font-family: inherit;
        font-size: 1rem; 
        font-weight: 800;
        cursor: pointer;
        transition: all var(--transition-speed-normal);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; 
        box-shadow: var(--shadow-level-2);
        text-shadow: 0 0 5px rgba(0,0,0,0.5);
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.2);
        letter-spacing: 0.6px;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 50%
        left: 50%
        width: 200% 
        height: 200%
        background: rgba(255,255,255,0.25);
        border-radius: 50%
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
        transition: transform 0.5s cubic-bezier(.25,.8,.25,1), opacity 0.5s ease;
        z-index: 0;
    }

    .btn:hover::before {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
    }

    .btn >
 * {
        position: relative;
        z-index: 1;
    }

    .btn:hover {
        transform: translateY(-3px) scale(1.01);
        box-shadow: var(--shadow-level-3), 0 0 20px var(--primary-glow), 0 0 10px var(--secondary-glow);
    }

    .btn:active {
        transform: translateY(-1px);
        box-shadow: var(--shadow-level-1);
    }

    .btn i {
        font-size: 1.1rem; 
    }

    .btn-outline {
        background: rgba(255, 255, 255, 0.03);
        border: 2px solid var(--primary-glow);
        color: var(--primary-glow);
        box-shadow: var(--shadow-level-1);
        text-shadow: 0 0 6px var(--primary-glow);
    }

    .btn-outline:hover {
        background: rgba(138, 43, 226, 0.1);
        color: var(--secondary-glow);
        transform: translateY(-2px);
        box-shadow: var(--shadow-level-2), 0 0 12px var(--secondary-glow);
    }

    
    .action-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); 
        gap: 10px; 
        margin-top: 20px; 
    }

    .action-btn {
        padding: 12px; 
        border-radius: var(--border-radius-sm);
        font-family: inherit;
        font-weight: 700;
        cursor: pointer;
        border: none;
        transition: all var(--transition-speed-fast);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 6px; 
        font-size: 0.85rem; 
        box-shadow: var(--shadow-level-1);
        color: white;
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        text-shadow: 0 0 3px rgba(0,0,0,0.5);
    }

    .action-btn i {
        font-size: 1rem; 
    }

    .download-btn {
        background: rgba(0, 255, 0, 0.15);
        border-color: rgba(0, 255, 0, 0.5);
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }

    .download-btn:hover {
        background: rgba(0, 255, 0, 0.3);
        transform: translateY(-2px);
        box-shadow: var(--shadow-level-2), 0 0 10px #00FF00;
    }

    .retry-btn {
        background: rgba(0, 0, 255, 0.15);
        border-color: rgba(0, 0, 255, 0.5);
        color: #00FFFF;
        text-shadow: 0 0 5px #00FFFF;
    }

    .retry-btn:hover {
        background: rgba(0, 0, 255, 0.3);
        transform: translateY(-2px);
        box-shadow: var(--shadow-level-2), 0 0 10px #00FFFF;
    }

    .share-btn {
        background: rgba(255, 0, 0, 0.15);
        border-color: rgba(255, 0, 0, 0.5);
        color: #FF6347;
        text-shadow: 0 0 5px #FF6347;
    }

    .share-btn:hover {
        background: rgba(255, 0, 0, 0.3);
        transform: translateY(-2px);
        box-shadow: var(--shadow-level-2), 0 0 10px #FF6347;
    }

    
    .result-container {
        display: none;
        animation: fadeInScale 0.6s cubic-bezier(.25,.8,.25,1) forwards;
    }

    .result-image-container {
        position: relative;
        margin-bottom: 15px; 
        border-radius: var(--border-radius-md);
        overflow: hidden;
        box-shadow: var(--shadow-level-3);
        border: 2px solid var(--primary-glow);
        aspect-ratio: 1 / 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(0,0,0,0.3);
        outline: 3px solid rgba(138, 43, 226, 0.2);
        outline-offset: -3px;
    }

    .result-image {
        width: 100%
        height: 100%
        object-fit: contain;
        display: block;
        transition: transform 0.3s ease-out;
        animation: imagePop 0.5s ease-out forwards;
    }

    .result-prompt {
        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
        color: var(--text-color-light);
        padding: 12px; 
        font-size: 0.85rem; 
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        max-height: 50%
        overflow-y: auto;
        text-align: center;
        border-bottom-left-radius: var(--border-radius-md);
        border-bottom-right-radius: var(--border-radius-md);
        opacity: 0;
        transition: opacity var(--transition-speed-normal);
        text-shadow: 0 0 3px rgba(0,0,0,0.5);
    }

    .result-image-container:hover .result-prompt {
        opacity: 1;
    }

    .empty-state {
        text-align: center;
        padding: 30px 15px; 
        display: none;
        animation: fadeIn 0.5s;
        background: rgba(255, 255, 255, 0.06);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border-radius: var(--border-radius-md);
        box-shadow: var(--shadow-level-2);
        margin-bottom: 15px; 
        border: 2px dashed var(--glass-border);
    }

    .empty-icon {
        font-size: 3rem; 
        color: rgba(255, 255, 255, 0.4);
        margin-bottom: 15px; 
        opacity: 0.9;
        text-shadow: 0 0 8px rgba(255,255,255,0.3);
    }

    .empty-title {
        font-size: 1.4rem; 
        margin-bottom: 10px; 
        color: var(--text-color-light);
        font-weight: 800;
        text-shadow: 0 0 5px rgba(0,0,0,0.5);
    }

    .empty-text {
        color: var(--text-color-dark);
        font-size: 0.9rem; 
        max-width: 90%
        margin: 0 auto;
    }

    
    .history-container {
        display: none;
        margin-top: 15px; 
    }

    .history-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); 
        gap: 10px; 
    }

    .history-item {
        border-radius: var(--border-radius-sm);
        overflow: hidden;
        cursor: pointer;
        position: relative;
        box-shadow: var(--shadow-level-1);
        transition: all var(--transition-speed-fast);
        aspect-ratio: 1/1;
        border: 1px solid var(--glass-border);
        background-color: rgba(0,0,0,0.3);
    }

    .history-item:hover {
        transform: translateY(-3px) scale(1.01);
        box-shadow: var(--shadow-level-2), 0 0 10px var(--primary-glow);
    }

    .history-img {
        width: 100%
        height: 100%
        object-fit: cover;
        display: block;
        transition: transform 0.3s;
    }

    .history-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(to top, rgba(0,0,0,0.9), transparent);
        padding: 10px; 
        color: var(--text-color-light);
        font-size: 0.8rem; 
        text-align: center;
        opacity: 0;
        transition: opacity var(--transition-speed-normal);
        display: flex;
        flex-direction: column;
        gap: 5px; 
        justify-content: flex-end;
        align-items: center;
    }

    .history-item:hover .history-overlay {
        opacity: 1;
    }

    .history-item-prompt {
        max-height: 40px; 
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        line-height: 1.3;
        font-size: 0.7em;
        color: var(--text-color-dark);
    }

    .history-delete-btn {
        background: rgba(255, 0, 0, 0.2);
        border: 1px solid rgba(255, 0, 0, 0.6);
        color: #FF4500;
        font-size: 0.9rem; 
        cursor: pointer;
        transition: background var(--transition-speed-fast), transform var(--transition-speed-fast), box-shadow var(--transition-speed-fast);
        margin-top: 6px; 
        padding: 6px 10px; 
        border-radius: var(--border-radius-sm);
        box-shadow: var(--shadow-level-1);
        text-shadow: 0 0 5px rgba(255,0,0,0.5);
    }

    .history-delete-btn:hover {
        background: #FF4500;
        color: white;
        transform: scale(1.05);
        box-shadow: var(--shadow-level-2);
    }

    
    .alert-message {
        padding: 14px; 
        border-radius: var(--border-radius-sm);
        margin-bottom: 15px; 
        text-align: center;
        display: none;
        animation: fadeIn 0.3s;
        border-right: 4px solid; 
        font-weight: 700;
        font-size: 0.9rem; 
        box-shadow: var(--shadow-level-1);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        text-shadow: 0 0 3px rgba(0,0,0,0.5);
    }

    .alert-error {
        background: rgba(255, 0, 0, 0.15);
        color: #FF4500;
        border-color: #FF4500;
        text-shadow: 0 0 5px #FF4500;
    }

    .alert-success {
        background: rgba(0, 255, 0, 0.15);
        color: #00FF00;
        border-color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }

    
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.85); 
        display: none;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        backdrop-filter: blur(15px); 
        -webkit-backdrop-filter: blur(15px);
        animation: fadeIn 0.3s;
    }

    .loader {
        width: 40px; 
        height: 40px;
        border: 4px solid rgba(138, 43, 226, 0.3); 
        border-radius: 50%
        border-top-color: var(--primary-glow);
        animation: spin 1s cubic-bezier(0.68, -0.55, 0.27, 1.55) infinite;
        margin-bottom: 20px; 
    }

    .loading-text {
        font-size: 1.2rem; 
        color: var(--text-color-light);
        margin-top: 10px; 
        font-weight: 800;
        text-shadow: 0 0 10px var(--primary-glow);
    }

    .progress-container {
        width: 80%
        max-width: 300px; 
        height: 10px; 
        background: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        margin-top: 20px; 
        overflow: hidden;
        box-shadow: inset 0 2px 6px rgba(0,0,0,0.2);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
        
        .progress-bar {
            height: 100%
            background: linear-gradient(to right, var(--primary-glow), var(--secondary-glow));
            width: 0%
            transition: width 0.4s ease-out;
            border-radius: 10px;
            box-shadow: 0 0 12px rgba(138, 43, 226, 0.7);
        }
        
        
        .settings-panel {
            position: fixed;
            top: 0;
            right: -100%
            width: 90% 
            max-width: 400px; 
            height: 100vh;
            background: rgba(0, 0, 0, 0.7); 
            backdrop-filter: blur(25px) saturate(180%);
            -webkit-backdrop-filter: blur(25px) saturate(180%);
            box-shadow: -10px 0 30px rgba(0,0,0,0.4); 
            padding: 25px; 
            z-index: 2001; 
            transition: right 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            overflow-y: auto;
            border-left: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .settings-panel.active {
            right: 0;
        }
        
        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px; 
            padding-bottom: 18px; 
            border-bottom: 1px solid rgba(255, 255, 255, 0.25);
        }
        
        .settings-title {
            font-size: 1.8rem; 
            color: var(--text-color-light);
            display: flex;
            align-items: center;
            gap: 15px; 
            font-weight: 800;
            text-shadow: 0 0 10px var(--primary-glow);
        }
        
        .close-settings {
            background: none;
            border: none;
            font-size: 2rem; 
            cursor: pointer;
            color: var(--text-color-light);
            transition: color var(--transition-speed-fast), transform var(--transition-speed-fast);
            text-shadow: 0 0 6px rgba(0,0,0,0.5);
        }

        .close-settings:hover {
            color: #FF4500;
            transform: rotate(180deg) scale(1.1); 
        }
        
        .setting-group {
            margin-bottom: 25px; 
        }
        
        .setting-label {
            display: block;
            margin-bottom: 10px; 
            font-weight: 700;
            font-size: 1rem; 
            color: var(--text-color-light);
            text-shadow: 0 0 4px rgba(0,0,0,0.5);
        }
        
        
        .setting-select {
            display: none; 
        }

        
        .custom-select-btn {
            width: 100%
            padding: 15px 20px;
            border: 1px solid var(--glass-border);
            border-radius: var(--border-radius-sm);
            font-family: inherit;
            font-size: 1rem;
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-color-light);
            transition: all var(--transition-speed-fast);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: inset 0 3px 6px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            outline: none;
            text-shadow: 0 0 4px rgba(0,0,0,0.5);
        }

        .custom-select-btn:hover {
            border-color: var(--secondary-glow);
            background-color: rgba(255, 255, 255, 0.15);
        }
        .custom-select-btn:active {
            transform: translateY(1px);
        }

        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%
            height: 100%
            background: rgba(0, 0, 0, 0.8); 
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2500; 
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: var(--glass-background);
            backdrop-filter: blur(25px) saturate(180%);
            -webkit-backdrop-filter: blur(25px) saturate(180%);
            border-radius: var(--border-radius-md);
            padding: 30px;
            box-shadow: var(--shadow-level-3);
            border: 1px solid var(--glass-border);
            width: 90%
            max-width: 450px; 
            transform: scale(0.9);
            opacity: 0;
            transition: transform 0.3s cubic-bezier(.25,.8,.25,1), opacity 0.3s ease;
            position: relative;
        }

        .modal-overlay.active .modal-content {
            transform: scale(1);
            opacity: 1;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
        }

        .modal-title {
            font-size: 1.6rem;
            color: var(--primary-glow);
            font-weight: 800;
            text-shadow: 0 0 10px var(--primary-glow);
        }

        .modal-close-btn {
            background: none;
            border: none;
            font-size: 2rem;
            color: var(--text-color-light);
            cursor: pointer;
            transition: color var(--transition-speed-fast);
        }
        .modal-close-btn:hover {
            color: #FF4500;
        }

        .modal-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .modal-option {
            background: rgba(255, 255, 255, 0.08);
            padding: 15px;
            border-radius: var(--border-radius-sm);
            border: 1px solid var(--glass-border);
            color: var(--text-color-light);
            font-size: 1rem;
            cursor: pointer;
            transition: all var(--transition-speed-fast);
            text-shadow: 0 0 3px rgba(0,0,0,0.4);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-option:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: var(--secondary-glow);
            transform: translateX(5px);
        }

        .modal-option.selected {
            background: var(--primary-glow);
            border-color: var(--primary-glow);
            color: white;
            font-weight: 700;
            box-shadow: 0 0 15px rgba(138, 43, 226, 0.5);
            transform: translateX(0); 
        }
        .modal-option.selected .check-icon {
            color: white;
            font-size: 1.2rem;
        }
        .check-icon {
            color: transparent; 
            transition: color var(--transition-speed-fast);
        }

        .settings-footer {
            margin-top: 30px; 
            padding-top: 20px; 
            border-top: 1px solid rgba(255, 255, 255, 0.25);
            display: flex;
            flex-direction: column;
            gap: 15px; 
        }
        
        
        .footer {
            text-align: center;
            padding: 15px 0; 
            background: rgba(0, 0, 0, 0.5); 
            backdrop-filter: blur(20px) saturate(180%);
            -webkit-backdrop-filter: blur(20px) saturate(180%);
            border-top: 1px solid rgba(255, 255, 255, 0.18);
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 100;
            display: flex;
            justify-content: space-around;
            box-shadow: 0 -8px 25px rgba(0,0,0,0.4); 
        }
        
        .footer-btn {
            background: none;
            border: none;
            color: var(--text-color-dark);
            font-size: 1.1rem; 
            cursor: pointer;
            padding: 10px 12px; 
            position: relative;
            transition: all var(--transition-speed-fast);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px; 
            font-weight: 700;
            flex: 1;
            text-shadow: 0 0 6px rgba(0,0,0,0.5);
            letter-spacing: 0.3px;
        }
        
        .footer-btn.active {
            color: var(--primary-glow);
            transform: translateY(-5px) scale(1.05); 
            text-shadow: 0 0 12px var(--primary-glow), 0 0 6px var(--secondary-glow);
        }

        .footer-btn.active i {
            font-size: 1.4rem; 
            color: var(--primary-glow);
        }
        
        .footer-btn-badge {
            position: absolute;
            top: 0;
            left: 50%
            transform: translate(-50%, -10px); 
            background: var(--tertiary-glow); 
            color: black;
            border-radius: 50%
            width: 24px; 
            height: 24px;
            font-size: 0.8rem; 
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 800;
            box-shadow: var(--shadow-level-1), 0 0 8px var(--tertiary-glow);
            opacity: 0;
            transition: opacity var(--transition-speed-fast), transform var(--transition-speed-fast);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .footer-btn-badge.active {
            opacity: 1;
            transform: translate(-50%, -13px) scale(1.1); 
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.6s;
        }
        
        
        .dark-mode {
            
        }
        
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeInScale {
            from { opacity: 0; transform: scale(0.98); }
            to { opacity: 1; transform: scale(1); }
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        @keyframes imagePop {
            0% { transform: scale(0.9); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }

        @keyframes pulse-bg {
            0% { transform: translate(-50%, -50%) scale(0.7); opacity: 0.1; }
            50% { transform: translate(-50%, -50%) scale(1.3); opacity: 0.2; }
            100% { transform: translate(-50%, -50%) scale(0.7); opacity: 0.1; }
        }
        
        
        @media (min-width: 768px) {
            .app-container {
                max-width: 850px; 
                padding: 40px;
                padding-top: 40px;
                padding-bottom: 100px;
            }
            .main-content {
                padding: 30px;
            }
            .card {
                padding: 30px;
                margin-bottom: 30px;
            }
            .card::before {
                height: 8px;
            }
            .card-title {
                font-size: 1.8rem;
                margin-bottom: 30px;
                gap: 20px;
                padding-bottom: 15px;
            }
            .card-title::after {
                width: 80px;
                height: 5px;
            }
            .card-title i {
                font-size: 1.7rem;
            }
            .input-group {
                margin-bottom: 35px;
            }
            .input-label {
                font-size: 1.1rem;
                margin-bottom: 15px;
            }
            .input-field {
                padding: 20px;
                font-size: 1.1rem;
            }
            textarea.input-field {
                min-height: 180px;
            }
            .style-options {
                grid-template-columns: repeat(5, 1fr); 
                gap: 20px;
                margin-bottom: 35px;
            }
            .style-option {
                padding: 25px 15px;
                gap: 15px;
                font-size: 1.05rem;
            }
            .style-option i {
                font-size: 2rem;
            }
            .style-option.active {
                transform: translateY(-8px) scale(1.03);
            }
            .style-option:hover:not(.active) {
                transform: translateY(-5px);
            }
            .style-description {
                font-size: 0.85rem;
            }
            .btn {
                padding: 22px;
                font-size: 1.3rem;
                gap: 18px;
                letter-spacing: 1px;
            }
            .btn i {
                font-size: 1.4rem;
            }
            .btn:hover {
                transform: translateY(-8px) scale(1.02);
            }
            .action-buttons {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                gap: 20px;
                margin-top: 30px;
            }
            .action-btn {
                padding: 18px;
                gap: 12px;
                font-size: 1.05rem;
            }
            .action-btn i {
                font-size: 1.3rem;
            }
            .action-btn:hover {
                transform: translateY(-5px);
            }
            .result-image-container {
                margin-bottom: 30px;
                outline: 5px solid rgba(138, 43, 226, 0.2);
                outline-offset: -5px;
            }
            .result-prompt {
                padding: 25px;
                font-size: 1.05rem;
            }
            .empty-state {
                padding: 60px 30px;
                margin-bottom: 30px;
                border: 3px dashed var(--glass-border);
            }
            .empty-icon {
                font-size: 5.5rem;
                margin-bottom: 30px;
            }
            .empty-title {
                font-size: 2rem;
                margin-bottom: 18px;
            }
            .empty-text {
                font-size: 1.1rem;
            }
            .history-container {
                margin-top: 30px;
            }
            .history-grid {
                grid-template-columns: repeat(4, 1fr);
                gap: 20px;
            }
            .history-item:hover {
                transform: translateY(-10px) scale(1.05);
            }
            .history-overlay {
                padding: 18px;
                font-size: 1rem;
                gap: 12px;
            }
            .history-item-prompt {
                max-height: 70px;
                line-height: 1.5;
                font-size: 0.9em;
            }
            .history-delete-btn {
                font-size: 1.2rem;
                margin-top: 10px;
                padding: 10px 15px;
            }
            .history-delete-btn:hover {
                transform: scale(1.15);
            }
            .alert-message {
                padding: 22px;
                margin-bottom: 30px;
                border-right: 8px solid;
                font-size: 1.1rem;
            }
            .loader {
                width: 80px;
                height: 80px;
                border: 8px solid rgba(138, 43, 226, 0.3);
                margin-bottom: 35px;
            }
            .loading-text {
                font-size: 1.6rem;
                margin-top: 18px;
            }
            .progress-container {
                max-width: 500px;
                height: 18px;
                margin-top: 35px;
            }
            .settings-panel {
                max-width: 500px;
                padding: 35px;
            }
            .settings-header {
                margin-bottom: 35px;
                padding-bottom: 25px;
            }
            .settings-title {
                font-size: 2rem;
                gap: 20px;
            }
            .close-settings {
                font-size: 2.5rem;
            }
            .setting-group {
                margin-bottom: 35px;
            }
            .setting-label {
                font-size: 1.1rem;
                margin-bottom: 15px;
            }
            
            .custom-select-btn {
                padding: 18px 25px;
                font-size: 1.1rem;
            }
            .modal-content {
                max-width: 500px; 
                padding: 40px;
            }
            .modal-title {
                font-size: 1.8rem;
            }
            .modal-close-btn {
                font-size: 2.2rem;
            }
            .modal-option {
                padding: 18px;
                font-size: 1.1rem;
            }
            .check-icon {
                font-size: 1.3rem;
            }

            .settings-footer {
                margin-top: 40px;
                padding-top: 30px;
                gap: 20px;
            }
            .footer {
                padding: 20px 0;
            }
            .footer-btn {
                font-size: 1.35rem;
                padding: 12px 18px;
                gap: 8px;
            }
            .footer-btn.active {
                transform: translateY(-8px) scale(1.08);
            }
            .footer-btn.active i {
                font-size: 1.7rem;
            }
            .footer-btn-badge {
                width: 28px;
                height: 28px;
                font-size: 0.9rem;
                transform: translate(-50%, -15px);
            }
            .footer-btn-badge.active {
                transform: translate(-50%, -18px) scale(1.2);
            }
        }
        
html, body {
    width: 100%
    height: 100%
}


</style>


</head>

    
<body data-theme="dark">

    
<canvas id="threejs-bg" width="1080" height="1242" style="width: 360px; height: 414px;">

</canvas>

    
<div class="app-container" id="app-container">

        
<main class="main-content">

            
<div class="tab-content active" id="generator-tab">

                
<div class="card">

                    
<h2 class="card-title">

                        
<i class="fas fa-atom">

</i>
 Create images with an engine HalaGPT
                    
</h2>

                    
<div class="input-group">

                        
<label for="prompt" class="input-label">
Write a description of the image
</label>

                        
<textarea id="prompt" class="input-field" placeholder="Write here whatever you want but it should not be short">

</textarea>

                    
</div>

                    
<div class="input-group">

                        
<label class="input-label">

                        
<i class="fas fa-robot" style="color:#4CAF50; margin-left:5px;">

</i>

                           Choose the template or keep the default
                     
</label>

                        
<div class="style-options" id="style-options-container">

<div class="style-option active" data-style="Flux">

                    
<i class="fas fa-bolt">

</i>

                    
<span>
Flux
</span>

                    
<p class="style-description">
True
</p>

                
</div>

<div class="style-option" data-style="Medieval">

                    
<i class="fas fa-chess-knight">

</i>

                    
<span>
Medieval
</span>

                    
<p class="style-description">
Art
</p>

                
</div>

<div class="style-option" data-style="Vincent Van Gogh">

                    
<i class="fas fa-palette">

</i>

                    
<span>
Vincent Van Gogh
</span>

                    
<p class="style-description">
Board
</p>

                
</div>

<div class="style-option" data-style="F Dev">

                    
<i class="fas fa-brain">

</i>

                    
<span>
F Dev
</span>

                    
<p class="style-description">
Advanced
</p>

                
</div>

<div class="style-option" data-style="Low Poly">

                    
<i class="fas fa-cubes">

</i>

                    
<span>
Low Poly
</span>

                    
<p class="style-description">
Simple
</p>

                
</div>

<div class="style-option" data-style="Dreamshaper-xl">

                    
<i class="fas fa-cloud-moon">

</i>

                    
<span>
Dreamshaper-xl
</span>

                    
<p class="style-description">
Dreams
</p>

                
</div>

<div class="style-option" data-style="Anima-pencil-xl">

                    
<i class="fas fa-pencil-alt">

</i>

                    
<span>
Anima-pencil-xl
</span>

                    
<p class="style-description">
Fee
</p>

                
</div>

<div class="style-option" data-style="Biomech">

                    
<i class="fas fa-microchip">

</i>

                    
<span>
Biomech
</span>

                    
<p class="style-description">
Mechanical
</p>

                
</div>

<div class="style-option" data-style="Trash Polka">

                    
<i class="fas fa-spray-can">

</i>

                    
<span>
Trash Polka
</span>

                    
<p class="style-description">
Bold
</p>

                
</div>

<div class="style-option" data-style="No Style">

                    
<i class="fas fa-ban">

</i>

                    
<span>
No Style
</span>

                    
<p class="style-description">
Raw
</p>

                
</div>

<div class="style-option" data-style="Cheyenne-xl">

                    
<i class="fas fa-feather-alt">

</i>

                    
<span>
Cheyenne-xl
</span>

                    
<p class="style-description">
Distinct
</p>

                
</div>

<div class="style-option" data-style="Chicano">

                    
<i class="fas fa-theater-masks">

</i>

                    
<span>
Chicano
</span>

                    
<p class="style-description">
Latin
</p>

                
</div>

<div class="style-option" data-style="Embroidery tattoo">

                    
<i class="fas fa-asterisk">

</i>

                    
<span>
Embroidery tattoo
</span>

                    
<p class="style-description">
Embroidery-like
</p>

                
</div>

<div class="style-option" data-style="Red and Black">

                    
<i class="fas fa-fire">

</i>

                    
<span>
Red and Black
</span>

                    
<p class="style-description">
Strong
</p>

                
</div>

<div class="style-option" data-style="Fantasy Art">

                    
<i class="fas fa-hat-wizard">

</i>

                    
<span>
Fantasy Art
</span>

                    
<p class="style-description">
Fantasy
</p>

                
</div>

<div class="style-option" data-style="Watercolor">

                    
<i class="fas fa-tint">

</i>

                    
<span>
Watercolor
</span>

                    
<p class="style-description">
Soft
</p>

                
</div>

<div class="style-option" data-style="Dotwork">

                    
<i class="fas fa-braille">

</i>

                    
<span>
Dotwork
</span>

                    
<p class="style-description">
Dotted
</p>

                
</div>

<div class="style-option" data-style="Old school colored">

                    
<i class="fas fa-flag-usa">

</i>

                    
<span>
Old school colored
</span>

                    
<p class="style-description">
Classic
</p>

                
</div>

<div class="style-option" data-style="Realistic tattoo">

                    
<i class="fas fa-eye-dropper">

</i>

                    
<span>
Realistic tattoo
</span>

                    
<p class="style-description">
Realistic
</p>

                
</div>

<div class="style-option" data-style="Japanese_2">

                    
<i class="fas fa-fan">

</i>

                    
<span>
Japanese_2
</span>

                    
<p class="style-description">
Traditional
</p>

                
</div>

<div class="style-option" data-style="Realistic-stock-xl">

                    
<i class="fas fa-image">

</i>

                    
<span>
Realistic-stock-xl
</span>

                    
<p class="style-description">
Professional
</p>

                
</div>

<div class="style-option" data-style="F Pro">

                    
<i class="fas fa-cogs">

</i>

                    
<span>
F Pro
</span>

                    
<p class="style-description">
Pro
</p>

                
</div>

<div class="style-option" data-style="RevAnimated">

                    
<i class="fas fa-film">

</i>

                    
<span>
RevAnimated
</span>

                    
<p class="style-description">
Dynamic
</p>

                
</div>

<div class="style-option" data-style="Katayama-mix-xl">

                    
<i class="fas fa-bezier-curve">

</i>

                    
<span>
Katayama-mix-xl
</span>

                    
<p class="style-description">
Blended
</p>

                
</div>

<div class="style-option" data-style="SDXL L">

                    
<i class="fas fa-dice-d6">

</i>

                    
<span>
SDXL L
</span>

                    
<p class="style-description">
Enhanced
</p>

                
</div>

<div class="style-option" data-style="Cor-epica-xl">

                    
<i class="fas fa-mountain">

</i>

                    
<span>
Cor-epica-xl
</span>

                    
<p class="style-description">
Epic
</p>

                
</div>

<div class="style-option" data-style="Anime tattoo">

                    
<i class="fas fa-user-ninja">

</i>

                    
<span>
Anime tattoo
</span>

                    
<p class="style-description">
Anime-style
</p>

                
</div>

<div class="style-option" data-style="New School">

                    
<i class="fas fa-graduation-cap">

</i>

                    
<span>
New School
</span>

                    
<p class="style-description">
Modern
</p>

                
</div>

<div class="style-option" data-style="Death metal">

                    
<i class="fas fa-skull-crossbones">

</i>

                    
<span>
Death metal
</span>

                    
<p class="style-description">
Dark
</p>

                
</div>

<div class="style-option" data-style="Old School">

                    
<i class="fas fa-book">

</i>

                    
<span>
Old School
</span>

                    
<p class="style-description">
Classic
</p>

                
</div>

<div class="style-option" data-style="Juggernaut-xl">

                    
<i class="fas fa-shield-alt">

</i>

                    
<span>
Juggernaut-xl
</span>

                    
<p class="style-description">
Powerful
</p>

                
</div>

<div class="style-option" data-style="Photographic">

                    
<i class="fas fa-camera-retro">

</i>

                    
<span>
Photographic
</span>

                    
<p class="style-description">
Photorealistic
</p>

                
</div>

<div class="style-option" data-style="SDXL 1.0">

                    
<i class="fas fa-layer-group">

</i>

                    
<span>
SDXL 1.0
</span>

                    
<p class="style-description">
Standard
</p>

                
</div>

<div class="style-option" data-style="Graffiti">

                    
<i class="fas fa-spray-can">

</i>

                    
<span>
Graffiti
</span>

                    
<p class="style-description">
Bold
</p>

                
</div>

<div class="style-option" data-style="Mini tattoo">

                    
<i class="fas fa-ruler-combined">

</i>

                    
<span>
Mini tattoo
</span>

                    
<p class="style-description">
Small
</p>

                
</div>

<div class="style-option" data-style="Surrealism">

                    
<i class="fas fa-infinity">

</i>

                    
<span>
Surrealism
</span>

                    
<p class="style-description">
Abstract
</p>

                
</div>

<div class="style-option" data-style="Neo-traditional">

                    
<i class="fas fa-feather">

</i>

                    
<span>
Neo-traditional
</span>

                    
<p class="style-description">
Modernized
</p>

                
</div>

<div class="style-option" data-style="On limbs black">

                    
<i class="fas fa-pen-nib">

</i>

                    
<span>
On limbs black
</span>

                    
<p class="style-description">
Limb-specific
</p>

                
</div>

<div class="style-option" data-style="Yamers-realistic-xl">

                    
<i class="fas fa-eye">

</i>

                    
<span>
Yamers-realistic-xl
</span>

                    
<p class="style-description">
Hyperrealistic
</p>

                
</div>

<div class="style-option" data-style="Pony-xl">

                    
<i class="fas fa-horse">

</i>

                    
<span>
Pony-xl
</span>

                    
<p class="style-description">
Unique
</p>

                
</div>

<div class="style-option" data-style="Playground-xl">

                    
<i class="fas fa-shapes">

</i>

                    
<span>
Playground-xl
</span>

                    
<p class="style-description">
Experimental
</p>

                
</div>

<div class="style-option" data-style="Anything-xl">

                    
<i class="fas fa-magic">

</i>

                    
<span>
Anything-xl
</span>

                    
<p class="style-description">
Versatile
</p>

                
</div>

<div class="style-option" data-style="Flame design">

                    
<i class="fas fa-fire-alt">

</i>

                    
<span>
Flame design
</span>

                    
<p class="style-description">
Fiery
</p>

                
</div>

<div class="style-option" data-style="Kawaii">

                    
<i class="fas fa-heart">

</i>

                    
<span>
Kawaii
</span>

                    
<p class="style-description">
Cute
</p>

                
</div>

<div class="style-option" data-style="Cinematic Art">

                    
<i class="fas fa-video">

</i>

                    
<span>
Cinematic Art
</span>

                    
<p class="style-description">
Dramatic
</p>

                
</div>

<div class="style-option" data-style="Professional">

                    
<i class="fas fa-briefcase">

</i>

                    
<span>
Professional
</span>

                    
<p class="style-description">
Premium
</p>

                
</div>

<div class="style-option" data-style="Black Ink">

                    
<i class="fas fa-pen-fancy">

</i>

                    
<span>
Black Ink
</span>

                    
<p class="style-description">
Monochrome
</p>

                
</div>

</div>

                    
</div>

                    
<button id="generate-btn" class="btn">

                        
<i class="fas fa-wand-magic-sparkles">

</i>
 Create an image
                    
</button>

                
</div>

                
                
<div class="alert-message alert-error" id="error-message">

</div>

                
<div class="alert-message alert-success" id="success-message">

</div>

                
                
<div class="empty-state" id="empty-state">

                    
<div class="empty-icon">

                        
<i class="fas fa-meteor">

</i>
 
</div>

                    
<h3 class="empty-title">
No pictures made yet
</h3>

                    
<p class="empty-text">
Start your journey now and create an image
</p>

                
</div>

                
                
<div class="card result-container" id="result-container" style="display: none;">

                    
<h2 class="card-title">

                        
<i class="fas fa-sparkle-stars">

</i>
 Complete cosmic creativity with HalaGPT
                    
</h2>

                    
<div class="result-image-container">

                        
<img id="result-image" class="result-image" src="" alt="You can create an image like this with your name from this site: https://si3.ct.ws/DARK/photo/index.php ">

                        
<div class="result-prompt" id="result-prompt">

</div>

                    
</div>

                    
<div class="action-buttons">

                        
<button id="download-btn" class="action-btn download-btn">

                            
<i class="fas fa-rocket">

</i>

                            Download
                        
</button>

                        
<button id="retry-btn" class="action-btn retry-btn">

                            
<i class="fas fa-compress-alt">

</i>

                            Reformulation
                        
</button>

                        
<button id="share-btn" class="action-btn share-btn">

                            
<i class="fas fa-share-nodes">

</i>

                            Sharing
                        
</button>

                    
</div>

                
</div>

            
</div>

            
            
<div class="tab-content" id="history-tab" style="display: none;">

                
<div class="card">

                    
<h2 class="card-title">

                        
<i class="fas fa-telescope">

</i>
 photo log
                    
</h2>

                    
                    
<div class="history-container" id="history-container">

                        
<div class="history-grid" id="history-grid">

</div>

                    
</div>

                    
                    
<div class="empty-state" id="history-empty-state">

                        
<div class="empty-icon">

                            
<i class="fas fa-stars">

</i>
 
</div>

                        
<h3 class="empty-title">
No photos saved yet
</h3>

                        
<p class="empty-text">
Your saved photos
</p>

                    
</div>

                
</div>

            
</div>

            
            
<div class="tab-content" id="settings-tab" style="display: none;">

                
<div class="card">

                    
<h2 class="card-title">

                        
<i class="fas fa-screwdriver-wrench">

</i>
 Settings
                    
</h2>

                    
                    
                    
<div class="setting-group">

                        
<label for="quality-select" class="setting-label">
Image quality
</label>

                        
<select class="setting-select" id="quality-select">

                            
<option value="low">
low
</option>

                            
<option value="medium">
Medium
</option>

                            
<option value="high">
High
</option>

                        
</select>

                        
<button class="custom-select-btn" data-target-select="quality-select">

                            
<span id="display-quality-select-value">
Medium
</span>

                            
<i class="fas fa-chevron-down">

</i>

                        
</button>

                    
</div>

                    
                    
<div class="setting-group">

                        
<label for="size-select" class="setting-label">
Image dimensions
</label>

                        
<select class="setting-select" id="size-select">

                            
<option value="1:1">
square 1:1
</option>

                            
<option value="16:9">
panorama 16:9
</option>

                            
<option value="9:16">
vertical 9:16)
</option>

                        
</select>

                        
<button class="custom-select-btn" data-target-select="size-select">

                            
<span id="display-size-select-value">
square 1:1
</span>

                            
<i class="fas fa-chevron-down">

</i>

                        
</button>

                    
</div>

                    
                    
<button id="clear-history-btn" class="btn btn-outline">

                        
<i class="fas fa-explosion">

</i>
 Clear photo history
                    
</button>

                    
                    
<div class="settings-footer">

                        
<button id="reset-settings-btn" class="btn btn-outline">

                            
<i class="fas fa-radiation">

</i>

                            Reset settings
                        
</button>

                    
</div>

                
</div>

             
</div>

        
</main>

        
<footer class="footer">

    
<button class="footer-btn active" data-tab="generator-tab" title="Create">

        
<i class="fas fa-magic">

</i>

    
</button>

    
<button class="footer-btn" data-tab="history-tab" title="Log">

        
<i class="fas fa-clock-rotate-left">

</i>

        
<span class="footer-btn-badge" id="history-badge" style="display: none;">
0
</span>

    
</button>

    
<button class="footer-btn" data-tab="settings-tab" title="Settings">

        
<i class="fas fa-gear">

</i>

    
</button>


</footer>

    
</div>

    
<script src="script.js">

</script>

        
        
<div class="loading-overlay" id="loading-overlay" style="display: none;">

            
<div class="loader">

</div>

            
<div class="loading-text" id="loading-text">
Image being created...
</div>

            
<div class="progress-container">

                
<div class="progress-bar" id="progress-bar">

</div>

            
</div>

        
</div>

    

    
<div class="modal-overlay" id="custom-select-modal">

        
<div class="modal-content">

            
<div class="modal-header">

                
<h3 class="modal-title" id="modal-title">

</h3>

                
<button class="modal-close-btn" id="modal-close-btn">
×
</button>

            
</div>

            
<div class="modal-options" id="modal-options-container">

                
</div>

        
</div>

    
</div>


    
<script>

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded and parsed');
            
            const styleOptionsContainer = document.getElementById('style-options-container');
            const generateBtn = document.getElementById('generate-btn');
            const promptInput = document.getElementById('prompt');
            const resultContainer = document.getElementById('result-container');
            const resultImage = document.getElementById('result-image');
            const resultPrompt = document.getElementById('result-prompt');
            const downloadBtn = document.getElementById('download-btn');
            const retryBtn = document.getElementById('retry-btn');
            const shareBtn = document.getElementById('share-btn');
            const loadingOverlay = document.getElementById('loading-overlay');
            const loadingText = document.getElementById('loading-text');
            const progressBar = document.getElementById('progress-bar');
            const errorMessage = document.getElementById('error-message');
            const successMessage = document.getElementById('success-message');
            const emptyState = document.getElementById('empty-state');
            const historyContainer = document.getElementById('history-container');
            const historyGrid = document.getElementById('history-grid');
            const historyEmptyState = document.getElementById('history-empty-state');
            const historyBadge = document.getElementById('history-badge');
            const footerBtns = document.querySelectorAll('.footer-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            const themeSelect = document.getElementById('theme-select');
            const qualitySelect = document.getElementById('quality-select');
            const sizeSelect = document.getElementById('size-select');
            const clearHistoryBtn = document.getElementById('clear-history-btn');
            const resetSettingsBtn = document.getElementById('reset-settings-btn');
            const appContainer = document.getElementById('app-container');

            
            const customSelectButtons = document.querySelectorAll('.custom-select-btn');
            const customSelectModal = document.getElementById('custom-select-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalCloseBtn = document.getElementById('modal-close-btn');
            const modalOptionsContainer = document.getElementById('modal-options-container');

        
        let generatedImages = [];
        let currentTheme = 'dark'; 
        let currentTab = 'generator-tab';
        
        const GENERATION_API_URL = window.location.pathname;
        let isGenerating = false;
        let latestBlob = null; 
        let activeSelectElement = null; 

        
        const MODELS = [
  { name: 'Flux', icon: 'fas fa-bolt', description: 'True' },
  { name: 'Medieval', icon: 'fas fa-chess-knight', description: 'Art' },
  { name: 'Vincent Van Gogh', icon: 'fas fa-palette', description: 'Board' },
  { name: 'F Dev', icon: 'fas fa-brain', description: 'Advanced' },
  { name: 'Low Poly', icon: 'fas fa-cubes', description: 'Simple' },
  { name: 'Dreamshaper-xl', icon: 'fas fa-cloud-moon', description: 'Dreams' },
  { name: 'Anima-pencil-xl', icon: 'fas fa-pencil-alt', description: 'Fee' },
  { name: 'Biomech', icon: 'fas fa-microchip', description: 'Mechanical' },
  { name: 'Trash Polka', icon: 'fas fa-spray-can', description: 'Bold' },
  { name: 'No Style', icon: 'fas fa-ban', description: 'Raw' },
  { name: 'Cheyenne-xl', icon: 'fas fa-feather-alt', description: 'Distinct' },
  { name: 'Chicano', icon: 'fas fa-theater-masks', description: 'Latin' },
  { name: 'Embroidery tattoo', icon: 'fas fa-asterisk', description: 'Embroidery-like' },
  { name: 'Red and Black', icon: 'fas fa-fire', description: 'Strong' },
  { name: 'Fantasy Art', icon: 'fas fa-hat-wizard', description: 'Fantasy' },
  { name: 'Watercolor', icon: 'fas fa-tint', description: 'Soft' },
  { name: 'Dotwork', icon: 'fas fa-braille', description: 'Dotted' },
  { name: 'Old school colored', icon: 'fas fa-flag-usa', description: 'Classic' },
  { name: 'Realistic tattoo', icon: 'fas fa-eye-dropper', description: 'Realistic' },
  { name: 'Japanese_2', icon: 'fas fa-fan', description: 'Traditional' },
  { name: 'Realistic-stock-xl', icon: 'fas fa-image', description: 'Professional' },
  { name: 'F Pro', icon: 'fas fa-cogs', description: 'Pro' },
  { name: 'RevAnimated', icon: 'fas fa-film', description: 'Dynamic' },
  { name: 'Katayama-mix-xl', icon: 'fas fa-bezier-curve', description: 'Blended' },
  { name: 'SDXL L', icon: 'fas fa-dice-d6', description: 'Enhanced' },
  { name: 'Cor-epica-xl', icon: 'fas fa-mountain', description: 'Epic' },
  { name: 'Anime tattoo', icon: 'fas fa-user-ninja', description: 'Anime-style' },
  { name: 'New School', icon: 'fas fa-graduation-cap', description: 'Modern' },
  { name: 'Death metal', icon: 'fas fa-skull-crossbones', description: 'Dark' },
  { name: 'Old School', icon: 'fas fa-book', description: 'Classic' },
  { name: 'Juggernaut-xl', icon: 'fas fa-shield-alt', description: 'Powerful' },
  { name: 'Photographic', icon: 'fas fa-camera-retro', description: 'Photorealistic' },
  { name: 'SDXL 1.0', icon: 'fas fa-layer-group', description: 'Standard' },
  { name: 'Graffiti', icon: 'fas fa-spray-can', description: 'Bold' },
  { name: 'Mini tattoo', icon: 'fas fa-ruler-combined', description: 'Small' },
  { name: 'Surrealism', icon: 'fas fa-infinity', description: 'Abstract' },
  { name: 'Neo-traditional', icon: 'fas fa-feather', description: 'Modernized' },
  { name: 'On limbs black', icon: 'fas fa-pen-nib', description: 'Limb-specific' },
  { name: 'Yamers-realistic-xl', icon: 'fas fa-eye', description: 'Hyperrealistic' },
  { name: 'Pony-xl', icon: 'fas fa-horse', description: 'Unique' },
  { name: 'Playground-xl', icon: 'fas fa-shapes', description: 'Experimental' },
  { name: 'Anything-xl', icon: 'fas fa-magic', description: 'Versatile' },
  { name: 'Flame design', icon: 'fas fa-fire-alt', description: 'Fiery' },
  { name: 'Kawaii', icon: 'fas fa-heart', description: 'Cute' },
  { name: 'Cinematic Art', icon: 'fas fa-video', description: 'Dramatic' },
  { name: 'Professional', icon: 'fas fa-briefcase', description: 'Premium' },
  { name: 'Black Ink', icon: 'fas fa-pen-fancy', description: 'Monochrome' }
];


        
        let camera, scene, renderer, stars, starGeo, nebula, nebulaTexture, noise;

        
        try { initApp(); } catch (e) { console.error('Error in initApp', e); }
        try { initThreeJS(); } catch (e) { console.error('Error in initThreeJS', e); }
        

        
        generateBtn.addEventListener('click', function() { console.log('Generate button clicked'); generateImage(); });
        retryBtn.addEventListener('click', generateImage);
        downloadBtn.addEventListener('click', downloadImage);
        shareBtn.addEventListener('click', shareImage);

        footerBtns.forEach(btn =>
 { console.log('Binding click for footer button', btn.getAttribute('data-tab'));
            btn.addEventListener('click', function () {
                const tabId = this.getAttribute('data-tab');
                footerBtns.forEach(b =>
 b.classList.remove('active'));
                tabContents.forEach(tab =>
 tab.classList.remove('active'));
                this.classList.add('active');
                const selectedTab = document.getElementById(tabId);
                if (selectedTab) selectedTab.classList.add('active');
                currentTab = tabId;
            });
        });

        
        footerBtns.forEach(btn =>
 { console.log('Binding click for footer button', btn.getAttribute('data-tab'));
            btn.addEventListener('click', function() {
                const tabId = this.getAttribute('data-tab');
                switchTab(tabId);
            });
        });

        
        
        

        clearHistoryBtn.addEventListener('click', clearHistory);
        resetSettingsBtn.addEventListener('click', resetSettings);

        
        customSelectButtons.forEach(button =>
 {
            button.addEventListener('click', openCustomSelectModal);
        });
        modalCloseBtn.addEventListener('click', closeCustomSelectModal);
        customSelectModal.addEventListener('click', (e) =>
 {
            
            if (e.target === customSelectModal) {
                closeCustomSelectModal();
            }
        });

        
        function initApp() {
            renderStyleOptions(); 
            loadHistory();
            loadSettings(); 
            updateHistoryUI();
            applyTheme(themeSelect.value); 
            setupThemeListener();
            switchTab(currentTab);
        }

        function renderStyleOptions() {
            styleOptionsContainer.innerHTML = '';
            MODELS.forEach(model =>
 {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'style-option';
                optionDiv.dataset.style = model.name;
                optionDiv.innerHTML = `
                    
<i class="${model.icon}">

</i>

                    
<span>
${model.name}
</span>

                    
<p class="style-description">
${model.description}
</p>

                `;
                styleOptionsContainer.appendChild(optionDiv);
            });
            
            const defaultOption = styleOptionsContainer.querySelector('[data-style="Flux"]');
            if (defaultOption) {
                defaultOption.classList.add('active');
            } else if (MODELS.length >
 0) {
                
                styleOptionsContainer.firstElementChild.classList.add('active');
            }

            
            styleOptionsContainer.querySelectorAll('.style-option').forEach(option =>
 {
                option.addEventListener('click', function() {
                    if (isGenerating) return;
                    styleOptionsContainer.querySelectorAll('.style-option').forEach(opt =>
 opt.classList.remove('active'));
                    this.classList.add('active');
                });
            });
        }

        async function generateImage() {
            if (isGenerating) return;
            
            if (!navigator.onLine) {
                showError('No internet connection');
                return;
            }
            const prompt = promptInput.value.trim();
            const selectedModelName = document.querySelector('.style-option.active').dataset.style;
            const selectedSize = sizeSelect.value; 

            if (!prompt) {
                showError('Please write a description for the image');
                promptInput.focus();
                return;
            }
            if (prompt.length 
< 10) {
                showError('The description is too short');
                return;
            }

            isGenerating = true;
            startLoading();
            hideMessages();
            simulateProgress();

            try {
                const url = `${GENERATION_API_URL}?text=${encodeURIComponent(prompt)}&model=${encodeURIComponent(selectedModelName)}&size=${encodeURIComponent(selectedSize)}`;
                const response = await fetch(url, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`${response.status} - ${errorText}`);
                }

                const data = await response.json();
                if (data.image_url) {
                    const imageBlobResponse = await fetch(data.image_url);
                    if (!imageBlobResponse.ok) {
                        throw new Error('ERROR');
                    }
                    latestBlob = await imageBlobResponse.blob();
                    displayGeneratedImage(data.image_url, prompt, `Prompt: ${prompt}, Style: ${selectedModelName}, Size: ${selectedSize}`);
                } else if (data.error) {
                    throw new Error(data.error);
                } else {
                    throw new Error('ERROR');
                }
            } catch (error) {
                console.error('Error during image generation:', error);
                stopLoading();
                showError(`${error.message}`);
            } finally {
                isGenerating = false;
            }
        }

        function displayGeneratedImage(imageUrl, originalPrompt, fullPrompt) {
            stopLoading();
            resultImage.src = imageUrl;
            resultPrompt.textContent = originalPrompt; 
            resultContainer.style.display = 'block';
            emptyState.style.display = 'none';

            saveToHistory(imageUrl, originalPrompt, fullPrompt);
            showSuccess('You can create an image like this with your name from this site: https://si3.ct.ws/DARK/photo/index.php ');
            
            setTimeout(() =>
 {
                resultContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 300);
        }

        
        function startLoading() {
            loadingOverlay.style.display = 'flex';
            progressBar.style.width = '0%';
            loadingText.textContent = 'Image being created...';
        }

        function stopLoading() {
            loadingOverlay.style.display = 'none';
            progressBar.style.width = '100%';
        }

        function simulateProgress() {
            let progress = 0;
            const interval = setInterval(() =>
 {
                progress  = Math.floor(Math.random() * 5)   1; 
                if (progress >
 95) progress = 95; 
                progressBar.style.width = `${progress}%`;
                if (!isGenerating && progress >
= 95) { 
                    clearInterval(interval);
                }
            }, 250);
        }

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            successMessage.style.display = 'none';
            setTimeout(() =>
 {
                errorMessage.style.display = 'none';
            }, 7000); 
        }

        function showSuccess(message) {
            successMessage.textContent = message;
            successMessage.style.display = 'block';
            errorMessage.style.display = 'none';
            setTimeout(() =>
 {
                successMessage.style.display = 'none';
            }, 5000);
        }

        function hideMessages() {
            errorMessage.style.display = 'none';
            successMessage.style.display = 'none';
        }

        
        function downloadImage() {
            if (!resultImage.src || resultImage.src.includes('undefined')) {
                showError('No image');
                return;
            }
            const link = document.createElement('a');
            link.href = resultImage.src;
            const urlParts = resultImage.src.split('/');
            const filenameFromUrl = urlParts[urlParts.length - 1].split('?')[0];
            link.download = filenameFromUrl || 'HalaGPT_Cosmic_Canvas_Image.png';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function shareImage() {
            if (!latestBlob) {
                showError('No image');
                return;
            }

            if (navigator.share) {
                const file = new File([latestBlob], 'HalaGPT_Cosmic_Canvas_Image.png', { type: 'image/png' });
                navigator.share({
                    files: [file],
                    title: 'You can create an image like this with your name from this site: https://si3.ct.ws/DARK/photo/index.php ',
                    text: resultPrompt.textContent || 'Check out this amazing picture Created by the site HalaGPT'
                })
                .then(() =>
 showSuccess('Shared Done'))
                .catch((error) =>
 {
                    if (error.name !== 'AbortError') {
                        showError('ERROR '   error.message);
                    }
                });
            } else {
                showError('Sharing feature is not supported');
            }
        }

        
        function saveToHistory(imageUrl, originalPrompt, fullPrompt) {
            const timestamp = new Date().toISOString();
            const imageRecord = {
                id: timestamp,
                url: imageUrl,
                prompt: originalPrompt,
                fullPrompt: fullPrompt,
                timestamp: timestamp
            };
            generatedImages.unshift(imageRecord);
            localStorage.setItem('halagpt_cosmic_history', JSON.stringify(generatedImages));
            updateHistoryUI();
        }

        function loadHistory() {
            const savedHistory = localStorage.getItem('halagpt_cosmic_history');
            if (savedHistory) {
                generatedImages = JSON.parse(savedHistory);
            }
        }

        function updateHistoryUI() {
            historyGrid.innerHTML = '';
            if (generatedImages.length === 0) {
                historyEmptyState.style.display = 'block';
                historyContainer.style.display = 'none';
                historyBadge.style.display = 'none';
            } else {
                historyEmptyState.style.display = 'none';
                historyContainer.style.display = 'block';
                historyBadge.style.display = 'flex';
                historyBadge.textContent = generatedImages.length;
                generatedImages.forEach(img =>
 {
                    const historyItem = document.createElement('div');
                    historyItem.className = 'history-item';
                    historyItem.dataset.id = img.id;

                    historyItem.innerHTML = `
                        
<img src="${img.url}" alt="${img.prompt}" class="history-img">

                        
<div class="history-overlay">

                            
<span class="history-item-prompt">
${img.prompt}
</span>

                            
<button class="history-delete-btn" data-id="${img.id}">

                                
<i class="fas fa-trash-alt">

</i>

                            
</button>

                        
</div>

                    `;
                    historyGrid.appendChild(historyItem);

                    historyItem.querySelector('img').addEventListener('click', () =>
 {
                        displayGeneratedImage(img.url, img.prompt, img.fullPrompt);
                        promptInput.value = img.prompt;
                        switchTab('generator-tab');
                        resultContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    });
                });

                document.querySelectorAll('.history-delete-btn').forEach(button =>
 {
                    button.addEventListener('click', (event) =>
 {
                        event.stopPropagation();
                        const idToDelete = event.target.closest('.history-delete-btn').dataset.id;
                        deleteHistoryItem(idToDelete);
                    });
                });
            }
        }

        function clearHistory() {
            if (confirm('Are you sure you want to clear your photo history?')) {
                generatedImages = [];
                localStorage.removeItem('halagpt_cosmic_history');
                updateHistoryUI();
                showSuccess('Photo history cleared');
            }
        }

        function deleteHistoryItem(id) {
            generatedImages = generatedImages.filter(item =>
 item.id !== id);
            localStorage.setItem('halagpt_cosmic_history', JSON.stringify(generatedImages));
            updateHistoryUI();
            showSuccess('The image has been removed from the registry');
        }

        
        function switchTab(tabId) {
            tabContents.forEach(tab =>
 {
                tab.style.display = 'none';
            });
            footerBtns.forEach(btn =>
 { console.log('Binding click for footer button:', btn.getAttribute('data-tab'));
                btn.classList.remove('active');
            });

            document.getElementById(tabId).style.display = 'block';
            document.querySelector(`.footer-btn[data-tab="${tabId}"]`).classList.add('active');
            currentTab = tabId;
            const mainContent = document.querySelector('.main-content');
            if (mainContent) {
                mainContent.scrollTop = 0;
            }
        }

        
        function openCustomSelectModal(event) {
            const targetSelectId = event.currentTarget.dataset.targetSelect;
            activeSelectElement = document.getElementById(targetSelectId);

            if (!activeSelectElement) return;

            modalTitle.textContent = activeSelectElement.previousElementSibling.textContent;
            modalOptionsContainer.innerHTML = '';

            Array.from(activeSelectElement.options).forEach(option =>
 {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'modal-option';
                optionDiv.dataset.value = option.value;
                optionDiv.textContent = option.textContent;

                const checkIcon = document.createElement('i');
                checkIcon.className = 'fas fa-check check-icon';
                if (option.value === activeSelectElement.value) {
                    optionDiv.classList.add('selected');
                    checkIcon.style.color = 'white';
                }
                optionDiv.appendChild(checkIcon);

                optionDiv.addEventListener('click', () =>
 {
                    activeSelectElement.value = option.value;
                    updateCustomSelectButtonDisplay(activeSelectElement);
                    closeCustomSelectModal();
                    saveSettings();
                    if (activeSelectElement.id === 'theme-select') {
                        applyTheme(activeSelectElement.value);
                    }
                });
                modalOptionsContainer.appendChild(optionDiv);
            });

            customSelectModal.classList.add('active');
        }

        function closeCustomSelectModal() {
            customSelectModal.classList.remove('active');
            activeSelectElement = null;
        }

        function updateCustomSelectButtonDisplay(selectElement) {
            const displaySpan = document.getElementById(`display-${selectElement.id}-value`);
            if (displaySpan) {
                displaySpan.textContent = selectElement.options[selectElement.selectedIndex].textContent;
            }
        }

        function saveSettings() {
            const settings = {
                theme: themeSelect.value,
                quality: qualitySelect.value,
                size: sizeSelect.value
            };
            localStorage.setItem('halagpt_cosmic_settings', JSON.stringify(settings));
            showSuccess('Settings saved');
        }

        function loadSettings() {
            const savedSettings = localStorage.getItem('halagpt_cosmic_settings');
            if (savedSettings) {
                const settings = JSON.parse(savedSettings);
                themeSelect.value = settings.theme || 'dark';
                qualitySelect.value = settings.quality || 'medium';
                sizeSelect.value = settings.size || '1:1';
            }
            updateCustomSelectButtonDisplay(themeSelect);
            updateCustomSelectButtonDisplay(qualitySelect);
            updateCustomSelectButtonDisplay(sizeSelect);
            applyTheme(themeSelect.value);
        }

        function resetSettings() {
            if (confirm('Are you sure you want to reset the settings to default?')) {
                localStorage.removeItem('halagpt_cosmic_settings');
                themeSelect.value = 'dark';
                qualitySelect.value = 'medium';
                sizeSelect.value = '1:1';
                
                updateCustomSelectButtonDisplay(themeSelect);
                updateCustomSelectButtonDisplay(qualitySelect);
                updateCustomSelectButtonDisplay(sizeSelect);

                applyTheme('dark');
                showSuccess('Settings have been reset to default');
            }
        }

        function applyTheme(theme) {
            if (theme === 'dark') {
                document.body.classList.add('dark-mode');
                appContainer.classList.add('dark-mode');
                document.body.style.backgroundColor = '#050515';
                document.body.style.color = 'var(--text-color-light)';
            } else if (theme === 'light') {
                document.body.classList.remove('dark-mode');
                appContainer.classList.remove('dark-mode');
                document.body.style.backgroundColor = '#E0E0E0';
                document.body.style.color = '#333';
            } else if (theme === 'auto') {
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.body.classList.add('dark-mode');
                    appContainer.classList.add('dark-mode');
                    document.body.style.backgroundColor = '#050515';
                    document.body.style.color = 'var(--text-color-light)';
                } else {
                    document.body.classList.remove('dark-mode');
                    appContainer.classList.remove('dark-mode');
                    document.body.style.backgroundColor = '#E0E0E0';
                    document.body.style.color = '#333';
                }
            }
        }

        function setupThemeListener() {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event =>
 {
                if (themeSelect.value === 'auto') {
                    applyTheme('auto');
                }
            });
        }

        
        function initThreeJS() {
            const canvas = document.getElementById('threejs-bg');
            renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);

            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
            camera.position.z = 5;

            starGeo = new THREE.BufferGeometry();
            const starVertices = [];
            for (let i = 0; i 
< 10000; i  ) {
                starVertices.push(
                    THREE.MathUtils.randFloatSpread(2500),
                    THREE.MathUtils.randFloatSpread(2500),
                    THREE.MathUtils.randFloatSpread(2500)
                );
            }
            starGeo.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));

            let starMaterial = new THREE.PointsMaterial({
                color: 0xffffff,
                size: 0.6,
                map: createCircleTexture(0.6),
                transparent: true,
                opacity: 0.9,
                blending: THREE.AdditiveBlending
            });
            stars = new THREE.Points(starGeo, starMaterial);
            scene.add(stars);

            noise = new PerlinNoise();
            nebulaTexture = createDynamicNebulaTexture();
            const nebulaGeometry = new THREE.SphereGeometry(60, 128, 128);
            const nebulaMaterial = new THREE.MeshBasicMaterial({
                map: nebulaTexture,
                transparent: true,
                opacity: 0.15,
                blending: THREE.AdditiveBlending,
                side: THREE.BackSide
            });
            nebula = new THREE.Mesh(nebulaGeometry, nebulaMaterial);
            scene.add(nebula);

            const ambientLight = new THREE.AmbientLight(0x404040, 0.8);
            scene.add(ambientLight);

            const pointLight = new THREE.PointLight(0x8a2be2, 0.5, 1000);
            pointLight.position.set(50, 50, 50);
            scene.add(pointLight);

            window.addEventListener('resize', onWindowResize, false);
            animate();
        }

        function createCircleTexture(size) {
            const canvas = document.createElement('canvas');
            canvas.width = size * 10;
            canvas.height = size * 10;
            const ctx = canvas.getContext('2d');
            ctx.beginPath();
            ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2, 0, Math.PI * 2);
            ctx.fillStyle = '#FFFFFF';
            ctx.fill();
            return new THREE.CanvasTexture(canvas);
        }

        function createDynamicNebulaTexture() {
            const canvas = document.createElement('canvas');
            canvas.width = 1024;
            canvas.height = 1024; 
            const ctx = canvas.getContext('2d');

            const imageData = ctx.createImageData(canvas.width, canvas.height);
            const data = imageData.data;
            const scale = 0.02;
            const octaves = 4;

            for (let x = 0; x 
< canvas.width; x  ) {
                for (let y = 0; y 
< canvas.height; y  ) {
                    let value = 0;
                    let maxAmplitude = 0;
                    let amplitude = 1;
                    let frequency = scale;

                    for (let i = 0; i 
< octaves; i  ) {
                        value  = noise.noise(x * frequency, y * frequency, 0) * amplitude;
                        maxAmplitude  = amplitude;
                        amplitude *= 0.5;
                        frequency *= 2;
                    }
                    value /= maxAmplitude;
                    value = (value   1) / 2;

                    let r, g, b;
                    if (value 
< 0.3) {
                        r = Math.floor(value * 255 * 0.5);
                        g = Math.floor(value * 255 * 0.5);
                        b = Math.floor(value * 255 * 1.5);
                    } else if (value 
< 0.6) {
                        r = Math.floor(value * 255 * 0.8);
                        g = Math.floor(value * 255 * 1.0);
                        b = Math.floor(value * 255 * 0.8);
                    } else {
                        r = Math.floor(value * 255 * 1.2);
                        g = Math.floor(value * 255 * 0.8);
                        b = Math.floor(value * 255 * 1.0);
                    }
                    
                    const alpha = Math.max(0, Math.min(255, Math.floor(value * 100)));

                    const index = (x   y * canvas.width) * 4;
                    data[index   0] = r;
                    data[index   1] = g;
                    data[index   2] = b;
                    data[index   3] = alpha;
                }
            }
            ctx.putImageData(imageData, 0, 0);
            return new THREE.CanvasTexture(canvas);
        }

        let nebulaRotationSpeed = 0.00005;
        let starTravelSpeed = 0.001;

        function animate() {
            requestAnimationFrame(animate);

            stars.rotation.x  = 0.00005;
            stars.rotation.y  = 0.0001;
            stars.position.z  = starTravelSpeed;
            if (stars.position.z >
 1000) {
                stars.position.z = -1000;
            }

            nebula.rotation.y  = nebulaRotationSpeed;
            nebula.rotation.z  = nebulaRotationSpeed * 0.5;

            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
    });

</script>

</body>

</html>